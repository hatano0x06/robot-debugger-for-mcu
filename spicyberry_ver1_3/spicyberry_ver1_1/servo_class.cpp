/***********************************************************************/
/*                                                                     */
/*  FILE        :servo_class.cpp			                           */
/*  DATE        :Tue, Sep 27, 2011                                     */
/*  DESCRIPTION :Main Program                                          */
/*  CPU TYPE    :SH7125                                                */
/*                                                                     */
/*  This file is generated by Renesas Project Generator (Ver.4.16).    */
/*                                                                     */
/***********************************************************************/
//servoクラスの中身



#define GLOBAL_INSTANCE
#include "global.h"
#include "servo_class.h" 
#include "iodefine.h"


servo::servo(int servo_id,int position,int first_dead_band,int first_p_change,int first_i_change,int first_d_change,int first_duty_limit)
{

	id=servo_id;
//	SCI1_OUT_DATA('a');

//	initial_position(position);

//	pid_mode();
/*	write_project(1);

	write_project(0);*/
//	p_gain(first_p_change);


//	dead_band(first_dead_band);
//	i_gain(first_i_change);
//	d_gain(first_d_change);
//	duty_limit(first_duty_limit);
}

void servo::write_project(int rock=0)
{
	int data;
	int csam;
	
	//送信部分
	if(rock==0){
		data=55;
	}else{
		data=170;
	}
	
	csam=(id+129+data)&0x00ff;
	while(sci0_miss==0){
		sci0_data_get_i=0;
		sci0_wait=0;
		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)129);
		SCI0_OUT_DATA_NORMAL(data);
		SCI0_OUT_DATA_NORMAL(csam);
		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;
	//リピート部分
//	getnum[0]=SCI2_IN_DATA();
//	getnum[1]=SCI2_IN_DATA();
}

void servo::offset_lock()
{
	
}

int servo::baud_rate()
{

	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(66);
	
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;
}

void servo::baud_rate(int baud_rate)
{
	char data;
	char csam;
	
	//送信部分
	data=(baud_rate)&0x00ff;
	
	csam=(id+194+data)&0x00ff;

	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)194);
		SCI0_OUT_DATA_NORMAL(data);
		SCI0_OUT_DATA_NORMAL(csam);
		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;

	
	//リピート部分
//	getnum[0]=SCI0_IN_DATA_WAIT();
//	getnum[1]=SCI0_IN_DATA_WAIT();	
}

void servo::duty_offset()
{
	
	
}

int servo::d_gain()
{

	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(80);
	
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;	
}

void servo::d_gain(int Dgain)
{
	char data;
	char csam;

	//送信部分	
	data=(Dgain)&0x00ff;
	
	csam=(id+208+data)&0x00ff;


	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)208);
		SCI0_OUT_DATA_NORMAL(data);
		SCI0_OUT_DATA_NORMAL(csam);

		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;


	//リピート部分
//	getnum[0]=SCI0_IN_DATA_WAIT();
//	getnum[1]=SCI0_IN_DATA_WAIT();	

}

int servo::i_gain()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(81);
	
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;
}

void servo::i_gain(int Igain)
{
	char data;
	char csam;
	
	//送信部分
	data=(Igain)&0x00ff;
	
	csam=(id+207+data)&0x00ff;


	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)207);
		SCI0_OUT_DATA_NORMAL(data);
		SCI0_OUT_DATA_NORMAL(csam);
	
		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;


	//リピート部分
//	getnum[0]=SCI0_IN_DATA_WAIT();
//	getnum[1]=SCI0_IN_DATA_WAIT();	

}

int servo::p_gain()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(82);
	
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;
}

void servo::p_gain(int speed)
{
	int data;
	int csam;

	//送信部分	
	data=(speed)&0x00ff;
	
	csam=(id+210+data)&0x00ff;

	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);	
		SCI0_OUT_DATA_NORMAL((char)210);
		SCI0_OUT_DATA_NORMAL(data);
		SCI0_OUT_DATA_NORMAL(csam);

		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;

	//リピート部分
//	getnum[0]=SCI2_IN_DATA();
//	getnum[1]=SCI2_IN_DATA();
}

int servo::current_position()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(85);
	
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;
}

int servo::temperature()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(86);
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;
}

int servo::dead_band()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(97);
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;
}

void servo::dead_band(int dead_band)
{
	char data_u,data_d;
	char csam;
	
	//送信部分
	data_u=(dead_band>>8)&(0x00ff);
	data_d=(dead_band)&0x00ff;
	
	csam=(id+225+data_u+data_d)&0x00ff;


	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)225);
		SCI0_OUT_DATA_NORMAL(data_u);
		SCI0_OUT_DATA_NORMAL(data_d);
		SCI0_OUT_DATA_NORMAL(csam);

		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;


	//リピート部分
//	getnum[0]=SCI0_IN_DATA_WAIT();
//	getnum[1]=SCI0_IN_DATA_WAIT();	
}

int servo::duty_limit()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(99);
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;
}

void servo::duty_limit(int duty_limit)
{
	char data_u,data_d;
	char csam;
	
	//送信部分
	data_u=(duty_limit>>8)&(0x00ff);
	data_d=(duty_limit)&0x00ff;
	
	csam=(id+227+data_u+data_d)&0x00ff;

	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)227);
		SCI0_OUT_DATA_NORMAL(data_u);
		SCI0_OUT_DATA_NORMAL(data_d);
		SCI0_OUT_DATA_NORMAL(csam);

		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;

	//リピート部分
//	getnum[0]=SCI0_IN_DATA_WAIT();
//	getnum[1]=SCI0_IN_DATA_WAIT();	

}

int servo::target_position()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(100); 
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;
}

void servo::target_position(int position)
{
	int data_u,data_d;
	int csam;

	//送信部分
	data_u=(position>>8)&(0x00ff);
	data_d=(position)&0x00ff;
	
	csam=(id+228+data_u+data_d)&0x00ff;
	SCI1_OUT_DATA('c');

	while(sci0_miss==0){
		SCI1_OUT_DATA('d');

//		sci0_data_get_i=0;
		sci0_wait=0;
		sci0_id=id;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)228);
		SCI0_OUT_DATA_NORMAL(data_u);
		SCI0_OUT_DATA_NORMAL(data_d);
		SCI0_OUT_DATA_NORMAL(csam);

		while(sci0_wait==0){
			SCI1_OUT_DATA('f');	
			SCI1_OUT_DATA('a'+id);
			SCI1_OUT_DATA(' ');			
			SCI1_OUT_DATA('a'+Get_Byte[0]);
			SCI1_OUT_DATA(' ');			
			SCI1_OUT_DATA(' ');			
			SCI1_OUT_DATA('a'+Get_Byte[1]);
			SCI1_OUT_DATA(' ');			
			SCI1_OUT_DATA(' ');			
			SCI1_OUT_DATA(' ');			
			SCI1_OUT_DATA('\n');			
			SCI1_OUT_DATA('\r');			
		};
	}
	sci0_miss=0;
	sci0_wait=0;
}

int servo::position_limit_min()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(101);
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;
}

void servo::position_limit_min(int position_limit_min)
{
	char data_u,data_d;
	char csam;
	
	//送信部分
	data_u=(position_limit_min>>8)&(0x00ff);
	data_d=(position_limit_min)&0x00ff;
	
	csam=(id+229+data_u+data_d)&0x00ff;

	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);	
		SCI0_OUT_DATA_NORMAL((char)229);
		SCI0_OUT_DATA_NORMAL(data_u);
		SCI0_OUT_DATA_NORMAL(data_d);
		SCI0_OUT_DATA_NORMAL(csam); 

		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;
}

int servo::initial_position()
{

	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(102);


	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;	
}

void servo::initial_position(int position)
{
	int data_u,data_d;
	int csam;
	
	//送信部分
	data_u=(position>>8)&(0x00ff);
	data_d=(position)&0x00ff;
		
	csam=(id+230+data_u+data_d)&0x00ff;

	while(sci0_miss==0){
		sci0_wait=0;
		SCI0_OUT_DATA_ID(id);	
		SCI0_OUT_DATA_NORMAL((char)230);
		SCI0_OUT_DATA_NORMAL(data_u);
		SCI0_OUT_DATA_NORMAL(data_d);
		SCI0_OUT_DATA_NORMAL(csam); 
		
		while(sci0_wait==0){};

	//	PE.DRL.BIT.B7=0;
	}
	sci0_miss=0;
	sci0_wait=0;
}

int servo::set_target_position()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(103);
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;	
}

void servo::set_target_position(int position)
{
	int data_u,data_d;
	int csam;
	
	//送信部分	
	data_u=(position>>8)&(0x00ff);
	data_d=(position)&0x00ff;
	
	csam=(id+231+data_u+data_d)&0x00ff;
	
	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)231);
		SCI0_OUT_DATA_NORMAL(data_u);
		SCI0_OUT_DATA_NORMAL(data_d);	
		SCI0_OUT_DATA_NORMAL(csam);

		while(sci0_wait==0){};

	//	PE.DRL.BIT.B7=0;
	}

	sci0_miss=0;
	sci0_wait=0;

}

int servo::offset_position()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(104);
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;	
}

void servo::offset_position(int offset)
{
	char data_u,data_d;
	char csam;
	
	//送信部分
	data_u=(offset>>8)&(0x00ff);
	data_d=(offset)&0x00ff;
	
	csam=(id+232+data_u+data_d)&0x00ff;

	while(sci0_miss==0){
		sci0_wait=0;
	
		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)232);
		SCI0_OUT_DATA_NORMAL(data_u);
		SCI0_OUT_DATA_NORMAL(data_d);
		SCI0_OUT_DATA_NORMAL(csam);
	
		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;

}

int servo::i_limit()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(105);
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;	
}

void servo::i_limit(int limit)
{
	char data_u,data_d;
	char csam;
	
	//送信部分
	data_u=(limit>>8)&(0x00ff);
	data_d=(limit)&0x00ff;
	
	csam=(id+233+data_u+data_d)&0x00ff;

	while(sci0_miss==0){
		sci0_wait=0;
		
		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)233);
		SCI0_OUT_DATA_NORMAL(data_u);
		SCI0_OUT_DATA_NORMAL(data_d);
		SCI0_OUT_DATA_NORMAL(csam);
	
		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;

}

int servo::speed_limit()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(106);
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;	
}

void servo::speed_limit(int speed_limit)
{
	char data_u,data_d;
	char csam;
	
	//送信部分
	data_u=(speed_limit>>8)&(0x00ff);
	data_d=(speed_limit)&0x00ff;
	
	csam=(id+234+data_u+data_d)&0x00ff;

	while(sci0_miss==0){
		sci0_wait=0;
		
		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)234);
		SCI0_OUT_DATA_NORMAL(data_u);
		SCI0_OUT_DATA_NORMAL(data_d);
		SCI0_OUT_DATA_NORMAL(csam);
	
		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;
}

int servo::acceleration_limit()
{
	SCI0_OUT_DATA_ID(id);
	SCI0_OUT_DATA_NORMAL(107);
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;	
}

void servo::acceleration_limit(int acceleration)
{
	char data_u,data_d;
	char csam;

	//送信部分	
	data_u=(acceleration>>8)&(0x00ff);
	data_d=(acceleration)&0x00ff;
	
	csam=(id+235+data_u+data_d)&0x00ff;


	while(sci0_miss==0){
		sci0_wait=0;
	
		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)235);
		SCI0_OUT_DATA_NORMAL(data_u);
		SCI0_OUT_DATA_NORMAL(data_d);
		SCI0_OUT_DATA_NORMAL(csam);

		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;
}

int servo::position_limit_max()
{
	SCI0_OUT_DATA_ID(id);
//	SCI0_OUT_DATA_NORMAL(117);
	/*
	rd[0] = sci0_rx();
	rd[1] = sci0_rx();
	rd[2] = sci0_rx();
	rd[3] = sci0_rx();
	rd[4] = sci0_rx();
	if(rd[4]==((rd[0]+rd[1]+rd[2]+rd[3])&(0xff00))){
		return (((rd[2]<<8)&0xff00)+(rd[3]&0x00ff));
		}
	else return -1;//エラーを返す
	*/	
	return 0;
}

void servo::position_limit_max(int limit)
{
	char data_u,data_d;
	char csam;
	
	//送信部分
	data_u=(limit>>8)&(0x00ff);
	data_d=(limit)&0x00ff;
	
	csam=(id+245+data_u+data_d)&0x00ff;

	while(sci0_miss==0){
		sci0_wait=0;
	
		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL((char)245);
		SCI0_OUT_DATA_NORMAL(data_u);
		SCI0_OUT_DATA_NORMAL(data_d);
		SCI0_OUT_DATA_NORMAL(csam);

		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;}


void servo::excute()
{
	//送信部分

	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL(88); 

		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;
}

void servo::servo_move()
{
	//送信部分
	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL(83);
	
		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;
}

void servo::servo_on()
{
	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL(89);

		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;
}

void servo::servo_off()
{
	//送信部分
	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL(90);		

		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;
}

void servo::digital_servo_mode()
{
	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL(33);

		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;
}

void servo::pid_mode()
{
	//送信部分
	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL(34);
		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;
}

void servo::home_position()
{
	//送信部分
	while(sci0_miss==0){
		sci0_wait=0;

		SCI0_OUT_DATA_ID(id);
		SCI0_OUT_DATA_NORMAL(83);
	
		while(sci0_wait==0);
	}
	sci0_miss=0;
	sci0_wait=0;
}


